23种设计模式：
创建型（5）
	单例模式：--5中实现方式 单例的破解
	工厂方法: -- 简单工厂（静态方法：单一静态方法/多静态方法） 
			  -- 工厂方法（总工厂->分工厂->生产不同的实例）（合 -> 分 -> 分）
	抽象工厂：组件拼接 构建一个产品簇 (分 -> 合) 通过工厂建造的实例来拿各个组件
	建造者模式：也是组件的拼接 但是最终是为了拼接完成的产品使用 Iphone举例 builder director
				StringBuilder中的append\SQL中的PreparedStatement\JDOM中的DomBuilder SAXBuilder
	原型模式：深克隆\浅克隆 原型模式与工厂模式一起Spring的bean就是这样产生的

结构型（7）：核心 从程序的结构上实现松耦合，扩大整体类的结构，用来解决更多的问题
	适配器模式： client调用target->adapted调用adaptee 一层一层向下调用 场景：InputStreamReader/OutputStreamWriter
				1、类适配器 通过继承
				2、组合实现对象适配器
	代理模式： 	AOP的核心机制
				1、动态代理：一个类全代理 针对方法
				2、静态代理：部分代理
	桥接模式：  不同维度的组合 取消多重继承 一个品牌接口（dell/lenovo），一个类型接口（台式机/笔记本）
	组合模式：  处理树形结构首先想到组合模式（用的很多） 天然的递归结构 Component(operation())-> Leaf() /Composite(add,remove,getChild)
	装饰模式：  动态给一个类添加新的功能，实现上与静态代理类似，但是是为了增加新的功能 车子飞 IO流
	外观模式：	迪米特原则（最少知识原则） DispatcherServlet 多点 -- 中心 -- 多组件  实现一个操作需要涉及到很多个类 facade 核心的出发点 封装
	享元模式：  共享元，节省内存,JDBC连接池，共享的是内部状态 工厂 外部状态单独处理 内部状态享元
	
行为型（11） 对象之间的相互交互
	责任链： 怎么构成一个链，链怎么传递，统一处理问题的接口，指定下一位责任人 自己不能不处理给下一个处理
	命令模式
	解释器
	迭代器： 聚合对象存储数据 迭代器遍历数据 有一定数据结构与算法的思想（定义的节点的迭代器） hastNext/next/fist/last/getCurrent
	中介者： 里面有个注册的关键！！！ 不同部门注册到同一个中介者，中介者协调
	备忘录：
	观察者：
	状态：
	策略：
	模板方法：
	访问者：
	
	
	
	
	
